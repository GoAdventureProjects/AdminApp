
@{
    ViewBag.Title = "TripEstimation";
}


<style type="text/css">

    .card {
        width: 100%;
    }

    #secSummary {
        width: 100%;
        margin-bottom: 20px;
        padding-top: 10px;
    }

    .popins-font {
        font-family: "Poppins", sans-serif;
        font-size: 1.1em;
        font-weight: 300;
    }
</style>
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
@section page_header{
    <div class="container-fluid">
        <h2 class="no-margin-bottom">Trip Estimation</h2>
    </div>
}

    <div class="container-fluid" id="maindiv">

        @*<div class="row">
            <input type="button" class="btn btn-primary" value="Transaction History" v-on:click="navigateToTransactions()" />
        </div>*@

        <!-- event summary -->
        <section class="projects no-padding-top no-padding-bottom">
            <div class="container-fluid">
                <!-- Project-->
                <div class="project">
                    <div class="row bg-white has-shadow">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="project-title d-flex align-items-center">
                                <div class="image has-shadow"><img src="https://d19m59y37dris4.cloudfront.net/admin/1-4-5/img/project-1.jpg" alt="..." class="img-fluid"></div>
                                <div class="text">
                                    <h3 class="h4">{{eventDetails.Title}}</h3><small>{{eventDetails.EventType}}</small>
                                </div>
                            </div>
                            <div class="project-date"><span class="hidden-sm-down">{{eventDetails.FromDate}} to {{eventDetails.ToDate}}</span></div>
                        </div>
                        <div class="right-col col-lg-6 d-flex align-items-center">
                            <div class="project-date"><span class="hidden-sm-down">Sots Avilable <b>{{eventDetails.AvailableSlots}} </b> </span></div>
                            <div class="project-date"><span class="hidden-sm-down">Sots Booked <b>{{eventDetails.BookedSlots}}</b> </span></div>
                            @*<div class="time"><i class="fa fa-clock-o"></i>Avilable Slots <b>25</b> </div>*@
                            <div class="comments"><i class="fa fa-comment-o"></i>0</div>
                            <div class="project-progress">
                                @*<div class="progress">
                                    <div role="progressbar" style="width: 45%; height: 6px;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" class="progress-bar bg-red"></div>
                                </div>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- summary board -->
        <div class="row">
            <section id="secSummary" class="dashboard-counts no-padding-bottom">
                <div class="container-fluid">
                    <div class="row bg-white has-shadow">
                        <!-- Item -->
                        <div class="col-xl-4 col-sm-6">
                            <div class="item d-flex align-items-center">
                                <div class="icon bg-violet"><i class="icon-user"></i></div>
                                <div class="title">
                                    <span>Total<br>Cost</span>
                                    <div class="progress">
                                        <div role="progressbar" style="width: 25%; height: 4px;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" class="progress-bar bg-violet"></div>
                                    </div>
                                </div>
                                <div class="number"><strong> {{ (eventDetails.BookedSlots)? eventDetails.BookedSlots*eventEstimation.totalAmount:eventEstimation.totalAmount}} </strong></div>
                            </div>
                        </div>
                        <!-- Item -->
                        <div class="col-xl-4 col-sm-6">
                            <div class="item d-flex align-items-center">
                                <div class="icon bg-red"><i class="icon-padnote"></i></div>
                                <div class="title">
                                    <span>Online</span>
                                    <div class="progress">
                                        <div role="progressbar" style="width: 70%; height: 4px;" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" class="progress-bar bg-red"></div>
                                    </div>
                                </div>
                                <div class="number"><strong>{{eventEstimation.online}}</strong></div>
                            </div>
                        </div>
                        <!-- Item -->
                        <div class="col-xl-4 col-sm-6">
                            <div class="item d-flex align-items-center">
                                <div class="icon bg-green"><i class="icon-bill"></i></div>
                                <div class="title">
                                    <span>Offline</span>
                                    <div class="progress">
                                        <div role="progressbar" style="width: 40%; height: 4px;" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" class="progress-bar bg-green"></div>
                                    </div>
                                </div>
                                <div class="number"><strong>{{eventEstimation.offline}}</strong></div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        <div class="row">
            <div class="col-md-10"></div>
            <div class="col-md-2">
                <button type="button" class="btn btn-danger" v-on:click="toggleReceiptDiv()" style="float:right">Update Receipt</button>
            </div>
        </div>


        <!-- select source for estimation-->
        <div class="row" id="divSelectSource" v-if="showSelectSource">
            <div class="card">
                <div class="card-close">
                    <div class="dropdown">
                        <button type="button" id="closeCard3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="dropdown-toggle"><i class="fa fa-ellipsis-v"></i></button>
                        <div aria-labelledby="closeCard3" class="dropdown-menu dropdown-menu-right has-shadow"><a href="#" class="dropdown-item remove"> <i class="fa fa-times"></i>Close</a><a href="#" class="dropdown-item edit"> <i class="fa fa-gear"></i>Edit</a></div>
                    </div>
                </div>
                <div class="card-header d-flex align-items-center">
                    <h3 class="h4">Select sources</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- stay -->
                        <div class="form-group col-md-3">
                            <select name="account" class="form-control" v-on:change="updateReceipt('stay')" v-model="selection.stay">
                                <option value="0">Select Stay</option>
                                <option v-for="(item,index) in expenseType.stay" v-bind:value="item.EventExpensesEstimateLookupID">{{ item.ExpenseTypeSource + " (&#8377; " + item.ExpenseAmount + ")" }} </option>
                            </select>
                        </div>

                        <!-- transport -->
                        <div class="form-group col-md-3">
                            <select name="account" class="form-control" v-on:change="updateReceipt('transport')" v-model="selection.transport">
                                <option value="0">Select Transport</option>
                                <option v-for="(item,index) in expenseType.transport" v-bind:value="item.EventExpensesEstimateLookupID">{{ item.slab + " (&#8377; " + item.amount + ")" }} </option>
                            </select>
                        </div>
                        <!-- guide -->
                        <div class="form-group col-md-3">
                            <input type="text" disabled="" v-bind:value="expenseType.guide.name +' (&#8377; '+ expenseType.guide.amount +' )'" class="form-control">
                            <input type="text" style="display:none" v-model="selection.guide" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- final cost resipt-->
            <div class="card">
                <div class="card-header d-flex align-items-center">
                    <h3 class="h4">Cost Receipt </h3>
                    <h6 style="margin-left:10px"> Total Amount :{{ "&#8377; "+ getTotalReciptAmount()  }} </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Category</th>
                                    <th>Name</th>
                                    <th>Amount</th>
                                    <th>Payment Mode</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="item in receipt">
                                    <td> {{ item.category }} </td>
                                    <td> {{ item.source}} </td>
                                    <td> {{ item.amount }} </td>
                                    <td> {{ item.paymentMode }} </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="row">
                        <input type="button" class="btn btn-primary" value="Save this receipt" v-on:click="updateReceipToDB()" />
                    </div>
                </div>
            </div>
        </div>


        <!-- saved receipt -->
        <div class="card" v-if="showSavedReceipt">
            <div class="card-header d-flex align-items-center">
                <h3 class="h4">Saved Receipt </h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Name</th>
                                <th>Amount</th>
                                <th>Payment Mode</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="item in savedReceipt">
                                <td>
                                    {{ item.ExpensesType }}
                                </td>
                                <td>
                                    {{ item.ExpenseTypeSource}}
                                </td>
                                <td> {{ item.ExpenseAmount }} </td>
                                <td> {{ item.ExpenseModeOfPayment }} </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- transaction-->

        <div class="row">

            <div class="card">
                <div class="card-header d-flex align-items-center">
                    <h3 class="h4" style="padding-right:5px; border-right:solid 2px gray">Transaction History</h3>
                    <div class="col-md-3 popins-font"> Total Amount:<span style="color:#ff7676"> {{eventEstimation.totalAmount }}</span> </div>
                    <div class="col-md-3 popins-font"> Transfered: <span style="color:#129c57">{{ eventEstimation.transfered }}</span> </div>
                    <div class="col-md-3 popins-font"> Balance:  <span style="color:#b78222"> {{ eventEstimation.balance  }}</span></div>
                </div>
                <div class="card-body" style="max-height:450px;overflow-y:auto">

                    <div class="row">
                        <div class="form-group col-md-2">
                            <label>Amount</label>
                            <input type="number" placeholder="Amount" class="form-control" v-model="newTransaction.amount">
                        </div>
                        <div class="form-group col-md-3">
                            <label>Date</label>
                            <input type="date" class="form-control" v-model="newTransaction.date">
                        </div>
                        <div class="form-group col-md-3">
                            <label> Recepient </label>
                            <select class="form-control" v-model="newTransaction.recepientId">
                                <option v-bind:value="'0'">Select Recepient</option>
                                <option v-for="item in recepientsList" v-bind:value="item.ExpenseRecipientID"> {{ item.RecipientName }} </option>
                            </select>
                        </div>
                        <div class="form-group col-md-3">
                            <label>Transaction ID</label>
                            <input id="txtTransactionId" type="text" placeholder="transaction id" class="form-control" v-model="newTransaction.transactionId">
                        </div>
                        <div class="form-group col-md-3">
                            <label>Notes</label>
                            <input type="text" placeholder="additional information" class="form-control" v-model="newTransaction.notes">
                        </div>
                        <div class="form-group col-md-3" style="padding-top:25px">
                            <input type="button" class="btn btn-primary" value="Save" v-on:click="saveTransaction()" />
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Transferred</th>
                                    <th>Recepient</th>
                                    <th>TransacrionId</th>
                                    <th>Notes</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="item in transactionsHistory">
                                    <td> {{ item.TransactionDate | formatDate }} </td>
                                    <td style="color:#129c57"> {{ item.TransferedAmount }} </td>
                                    <td> {{ item.Recepient }} </td>
                                    <td> {{ item.TransactionID }} </td>
                                    <td> {{ item.notes }} </td>
                                </tr>
                            </tbody>
                        </table>

                    </div>
                </div>
            </div>

        </div>

    </div>

<script type="text/javascript">

    $(function () {

        var vueapp = new Vue({
            el: "#maindiv",
            data: {
                eventDatesId: 0,
                showSavedReceipt:true,
                showSelectSource: false,
                showAddNewTransactionDiv: false,
                selectedEvent: "",
                eventDetails: [],
                eventData: [],
                selection: {
                    stay: 0,
                    transport: 0,
                    guide: 0
                },
                eventDetails: {
                    Title: "",
                    EventType: "",
                    NoOfSlots:0,
                    BookedSlots:0,
                    AvailableSlots: 0,
                    FromDate:"",
                    ToDate:""
                },
                expenseType: {
                    stay: [],
                    transport: [],
                    guide: {}
                },
                eventEstimation: {
                    totalAmount: 0,
                    online: 0,
                    offline: 0,
                    transfered: 0,
                    balance:0
                },
                receipt: [],
                recepientsList: [],
                savedReceipt:[],
                newTransaction: {
                    amount: 0,
                    date: new Date(),
                    recepientId: 0,
                    transactionId: "",
                    notes: "",
                    balanceAmount: 0
                },
                transactionsHistory: []
            },
            mounted: function () {
                this.eventDatesId = location.search.split("=")[1]; //assuming 1 param only

                //get recepients list
                this.getEventExpenseLookup();
                this.getRecepientsList();
                this.getEventEstimationSummary(this.eventDatesId);
                this.getEventDetails();
                this.getEventEstimation();
                //this.getTransactionHistory(this.eventDatesId);
                
            },
            methods: {
                updateReceipt: function () {
                    this.receipt = [];
                    this.updateSourceDataInReceipt("stay")
                    this.updateSourceDataInReceipt("transport")
                    this.updateSourceDataInReceipt("guide")
                },
                updateSourceDataInReceipt: function (type) {
                    var obj = {};
                    if (type == "stay")
                        obj = this.eventData.filter(x => x["EventExpensesEstimateLookupID"] == this.selection.stay)[0];
                    else if (type == "transport")
                        obj = this.eventData.filter(x => x["EventExpensesEstimateLookupID"] == this.selection.transport)[0];
                    else if (type = "guide")
                        obj = this.eventData.filter(x => x["EventExpensesEstimateLookupID"] == this.selection.guide)[0];

                    if (obj) {
                        this.receipt.push({
                            category: type,
                            source: (type == "transport") ? obj["SlabRange"] : obj["ExpenseTypeSource"],
                            amount: obj["ExpenseAmount"],
                            paymentMode: obj["ExpenseModeOfPayment"],
                            eventExpensesEstimateLookupID: obj["EventExpensesEstimateLookupID"],
                        })
                    }

                },
                getTotalReciptAmount: function () {
                    debugger;
                    return this.receipt.reduce((acc, a) => { return acc + a.amount }, 0);
                },
                updateReceipToDB: function () {
                    fetch("UpdateTripEstimation?EventDatesId=" + location.search.split("=")[1], {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(this.receipt)
                    }).then(data => alert("Request Success:"))
                        .catch(response => alert("Request Failed"));
                },
                navigateToTransactions: function () {
                    window.location.href = '/ManageTrip/Transactions?Id=' + location.search.split("=")[1];
                },
                getRecepientsList: function () {
                    fetch("GetRecepientsList")
                        .then(result => result.json())
                        .then(jsondata => this.recepientsList = jsondata)
                },
                getEventExpenseLookup: function () {
                    fetch("/ManageData/GetEventExpensesLookup?eventDetailId=" + this.eventDatesId)
                        .then(result => result.json())
                        .then(jsondata => {
                            this.eventData = jsondata.slice();
                            this.expenseType.stay = getDataByCategory(jsondata, "stay");
                            this.expenseType.transport = getTrasportData(jsondata);
                            this.expenseType.guide = getGuideData(jsondata);
                            this.selection.guide = this.expenseType.guide["EventExpensesEstimateLookupID"]
                        })
                },
                getEventDetails: function () {
                    fetch("GetEventDetails?id=" + this.eventDatesId)
                        .then(result => result.json())
                        .then(jsondata => {
                            this.eventDetails = jsondata;
                        })
                },
                getTransactionHistory: function () {
                    fetch("GetEventTransactions?eventDatesId=" + this.eventDatesId)
                        .then(result => result.json())
                        .then(jsondata => {
                            this.transactionsHistory = jsondata;
                            let tfamount = this.transactionsHistory.map(x => x['TransferedAmount']).reduce((a, b) => { return a + b }, 0);
                            this.eventEstimation.transfered = tfamount;
                            this.eventEstimation.balance = this.eventEstimation.totalAmount - tfamount;
                        })
                },
                getEventEstimationSummary: function (eventDatesId) {
                    fetch("GetEventEstimationSummary?eventDatesId=" + eventDatesId)
                        .then(result => result.json())
                        .then(data => {
                            this.eventEstimation.totalAmount = data.map(x => x["Amount"]).reduce((a, b) => { return a + b }, 0);
                            this.eventEstimation.online = data.filter(x => x["ModeOfPayment"] == 'online').map(x => x["Amount"]).reduce((a, b) => { return a + b }, 0)
                            this.eventEstimation.offline = data.filter(x => x["ModeOfPayment"] == 'offline').map(x => x["Amount"]).reduce((a, b) => { return a + b }, 0)

                            this.getTransactionHistory(this.eventDatesId);
                        })
                },
                getEventEstimation: function () {
                    fetch("GetEventEstimation?id=" + this.eventDatesId)
                        .then(result => result.json())
                        .then(data => {
                            for (var i = 0; i < data.length; i++) {
                                if (data[i]["ExpensesType"] == "Transport") {
                                    data[i]["ExpenseTypeSource"] = data[i]["SlabRange"];
                                }
                            }
                            this.savedReceipt = data;    
                        })
                },
                getEventAmount: function () {
                },
                saveTransaction: function () {

                    var param = {
                        EventDatesID: this.eventDatesId,
                        TransferedAmount: this.newTransaction.amount,
                        TransactionDate: this.newTransaction.date,
                        TransactionID: this.newTransaction.transactionId,
                        ExpenseRecipientID: this.newTransaction.recepientId,
                        notes: this.newTransaction.notes
                    };

                    fetch("SaveTransaction?eventDatesId=" + this.eventDatesId, {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(param)
                    }).then(data => {
                        alert("Request Success:");
                        this.getTransactionHistory(); //updates view
                    }).catch(response => alert("Request Failed"));

                },
                toggleReceiptDiv: function () {
                    this.showSelectSource = !this.showSelectSource;
                }
            },
            filters: {
                formatDate: function (value) {
                    if (value) {
                        return moment(String(value)).format('MMM Do YYYY')
                    }
                }
            }
        });
    });

    //utils
    function getDataByCategory(data, type) {
        var typeId = window._EventExpenseType.filter(x => x["ExpensesType"].toLowerCase() == type.toLowerCase())[0]["ExpensesTypeid"];
        return data.filter(x => x["ExpensesTypeid"] == typeId);
    }

    function getExpenseTypeId(type) {
        return window._EventExpenseType.filter(x => x["ExpensesType"].toLowerCase() == type)[0]["ExpensesTypeid"]
    }

    function getTrasportData(data) {
        var arr = [];
        var ids = window._EventExpenseType.filter(x => x["ExpensesType"].toLowerCase() == "transport");
        for (let i = 0; i < ids.length; i++) {
            if (data.filter(x => x["ExpensesTypeid"] == ids[i]["ExpensesTypeid"]).length > 0) {
                arr.push({
                    EventExpensesEstimateLookupID: (data.filter(x => x["ExpensesTypeid"] == ids[i]["ExpensesTypeid"]))[0]["EventExpensesEstimateLookupID"],
                    ExpensesTypeid: ids[i]["ExpensesTypeid"],
                    slab: ids[i]["ExpenseTypeCode"],
                    amount: (data.filter(x => x["ExpensesTypeid"] == ids[i]["ExpensesTypeid"]))[0]["ExpenseAmount"]
                })
            }
            //else {
            //    arr.push({
            //        ExpensesTypeid: ids[i]["ExpensesTypeid"],
            //        slab: ids[i]["ExpenseTypeCode"],
            //        amount: 0
            //    })
            //}
        }
        return arr;
        //data.filter(ids.indexOf(x["ExpensesTypeid"] != -1)).map(x => new { slab: x["ExpensesTypeCode"],amount:x[""] })
    }

    function getGuideData(data) {
        var obj = {
            //expenseTypeId: getExpenseTypeId("guide"),
            //guide: "",
            //amount: 0,
            //paymentMode: "online"
        }

        var result = getDataByCategory(data, "guide");
        if (result != null && result.length > 0) {
            obj.name = result[0]["ExpenseTypeSource"];
            obj.amount = result[0]["ExpenseAmount"];
            obj.paymentMode = result[0]["ExpenseModeOfPayment"];
            obj.EventExpensesEstimateLookupID = result[0]["EventExpensesEstimateLookupID"];
        }
        return obj;
    }


</script>


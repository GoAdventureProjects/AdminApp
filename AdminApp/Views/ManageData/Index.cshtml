
@{
    ViewBag.Title = "Stay";
}

<style type="text/css">
    .card {
        width: 100%;
    }
</style>

<!-- bootstrap select -->
<link href="~/Content/plugins/bootstrap_select/bootstrap-select.min.css" rel="stylesheet" />
<script src="~/Content/plugins/bootstrap_select/bootstrap-select.min.js"></script>
<script src="~/Scripts/popper.min.js"></script>

<!-- bootstrap toggle -->
<link href="~/Content/plugins/bootstrap_toggle/bootstrap-toggle.min.css" rel="stylesheet" />
<script src="~/Content/plugins/bootstrap_toggle/bootstrap-toggle.min.js"></script>

@section page_header{
    <div class="container-fluid">
        <h2 class="no-margin-bottom">Manage Data</h2>
    </div>
}

<div class="container-fluid" id="maindiv">
    <div class="row">

        <!-- selection -->
        <div class="card">

            <div class="card-body">
                <div class="form-group row">

                    <div class="col-md-3">
                        <div class="form-group">
                            <select id="ddlEventType" class="form-control mb-3" v-on:change="onEventTypeChange($event)">
                                <option>Select Event Type</option>
                                <option v-for="i in eventDetails.eventTypes"> {{ i }} </option>
                            </select>
                        </div>
                    </div>

                    <div class="col-md-8">
                        <div class="form-group">
                            <select name="account" id="ddlEvents" class="form-control show-tick" data-live-search="true" data-size="15" v-on:change="onEventChange()" v-model="selectedEvent">
                                <option>Select Event</option>
                                <option v-for="event in eventDetails.currentEventData" v-bind:value="event['EventDetailsId']"> {{ event["EventTitle"] }} </option>
                            </select>
                        </div>
                    </div>

                </div>

            </div>
        </div>
        <app-world></app-world>

        <!-- manage stay -->
        <div class="card">
            <div class="card-header d-flex align-items-center">
                <h3 class="h4">Manage-Stay</h3>
            </div>
            <div class="card-body">

                <!-- add new stay-->
                <div class="row">
                    <div class="form-group col-md-3">
                        <label>Stay</label>
                        <input id="txtStayName" type="text" placeholder="hotel/stay" class="form-control" v-model="crud.stay.name">
                    </div>
                    <div class="form-group col-md-3">
                        <label>Cost</label>
                        <input id="txtStayAmount" type="text" placeholder="cost/person/day" class="form-control" v-model="crud.stay.amount">
                    </div>
                    <div class="form-group col-md-3">
                        <label>Notes</label>
                        <input id="txtStayNotes" type="text" placeholder="additional information" class="form-control" v-model="crud.stay.notes">
                    </div>
                    <div class="form-group col-md-3">
                        <input type="button" class="btn btn-primary" value="Save" v-on:click="crudMethods().createStay()" />
                    </div>
                </div>


                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th> Stay </th>
                                <th> Amount (cost/person/day)</th>
                                <th> Mode of payment </th>
                                <th> Notes </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(row,index) in expenseType.stay">
                                <td> {{ row["ExpenseTypeSource"] }} </td>
                                <td> &#x20b9; {{ row["ExpenseAmount"] }} </td>
                                <td>
                                    {{ row["ExpenseModeOfPayment"] }}
                                    @*<input v-bind:id="'cbPaymentMode_'+index" type="checkbox" data-type="paymentMode" data-toggle="toggle">*@
                                    @*{{ renderToggleBtns('cbPaymentMode_'+index,row["ExpenseModeOfPayment"]) }}*@
                                </td>
                                <td>
                                    {{ row["Notes"] }}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- manage transportation -->
        <div class="card">
            <div class="card-header d-flex align-items-center">
                <h3 class="h4">Manage-Transportation</h3>
            </div>
            <div class="card-body">
                <div class="form-group col-md-4" v-for="tp in expenseType.transport">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">
                                {{ tp["slab"] }}
                            </span>
                        </div>
                        <input type="number" placeholder="Username" class="form-control" v-bind:value="tp['amount']" v-model="tp.amount">
                    </div>
                </div>
                <div>
                    <input  type="button" class="btn btn-primary" value="Update Amount" v-on:click="crudMethods().updateTransport()()" />
                </div>
            </div>
        </div>

        <!-- manage Guide -->
        <div class="card">
            <div class="card-header d-flex align-items-center">
                <h3 class="h4">Manage-Guide</h3>
            </div>
            <div class="card-body">
                <div class="form-inline">
                    <div class="form-group">
                        <label for="inlineFormInput" class="sr-only">Name</label>
                        <input id="inlineFormInput" type="text" placeholder="Guide Name" class="mr-3 form-control" v-bind:value="expenseType.guide.name" v-model="expenseType.guide.name">
                    </div>
                    <div class="form-group">
                        <label for="inlineFormInputGroup" class="sr-only">Amount</label>
                        <input id="inlineFormInputGroup" type="number" placeholder="Amount" class="mr-3 form-control" v-bind:value="expenseType.guide.amount" v-model="expenseType.guide.amount">
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-primary" v-on:click="crudMethods().updateGude()">Update</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>



<script type="text/javascript">


    //init bootstrap toogle checkboxes


    //initialize bootstrap-select dropdown
    $(function () {
        // $("#ddlEvents").selectpicker();


        var app = new Vue({
            el: "#maindiv",
            components: {
                //'app-world': window.httpVueLoader('components/HelloWorld.vue')
            },
            data: {
                selectedEvent: "",
                eventDetails: {
                    originalData: [],
                    eventTypes: [],
                    currentEventData: []
                },
                expenseType: {
                    stay: [],
                    transport: [],
                    guide: {}
                },
                crud: {
                    stay: {
                        name: "",
                        amount: null,
                        notes: ""
                    }
                }
            },
            mounted: function () {
                //fill event type dropdown
                fetch("/ManageData/GetAllEvents")
                    .then(result => result.json())
                    .then(jsondata => {
                        this.eventDetails.originalData = jsondata;
                        this.eventDetails.eventTypes = jsondata.map(x => x.EventType).filter((x, i, arr) => arr.indexOf(x) == i).filter(x => x != null); //filter unique
                    });
            },
            methods: {
                onEventTypeChange: function (el) {
                    var eventType = el.target.value;
                    this.eventDetails.currentEventData = this.eventDetails.originalData.filter(x => x.EventType == eventType);
                },
                onEventChange: function () {
                    fetch("/ManageData/GetEventExpensesLookup?eventDetailId=" + this.selectedEvent)
                        .then(result => result.json())
                        .then(jsondata => {
                            this.expenseType.stay = getDataByCategory(jsondata, "stay");
                            this.expenseType.transport = getTrasportData(jsondata);
                            this.expenseType.guide = getGuideData(jsondata);
                        })
                },
                renderToggleBtns: function (id, value) {
                    value = value || "on";
                    //$("input[type='checkbox'][data-type='paymentMode']")
                    $("#" + id).bootstrapToggle(value, {
                        on: 'online',
                        off: 'offline',
                        onstyle: 'success'
                    });
                },
                crudMethods: function () {
                    var self = this;
                    return {
                        createStay: function () {
                            var param = {
                                eventDetailId: self.selectedEvent,
                                expenseTypeId: getExpenseTypeId("stay"),
                                name: self.crud.stay.name,
                                amount: self.crud.stay.amount,
                                paymentMode: 'online',
                                notes: self.crud.stay.notes
                            };

                            fetch("/ManageData/CreateStay", {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(param)
                            })
                                .then(response => response.json())
                                .then(jsonresponse => {
                                    alert(jsonresponse);

                                    self.crud.stay.name = "";
                                    self.crud.stay.amount = null;
                                    self.crud.stay.notes = "";
                                    //refresh data
                                    self.onEventChange();
                                });
                        },
                        updateTransport: function () {
                            fetch("/ManageData/UpdateTrasport?EventId=" + self.selectedEvent, {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(self.expenseType.transport)
                            })
                                .then(response => response.text())
                                .then(body => alert(body));
                        },
                        updateGude: function () {
                            fetch("/ManageData/UpdateGuide?EventId=" + self.selectedEvent, {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(self.expenseType.guide)
                            })
                                .then(response => response.text())
                                .then(body => alert(body));
                        }
                    }
                }
            }
        });


        //utils
        function getDataByCategory(data, type) {
            var typeId = window._EventExpenseType.filter(x => x["ExpensesType"].toLowerCase() == type.toLowerCase())[0]["ExpensesTypeid"];
            return data.filter(x => x["ExpensesTypeid"] == typeId);
        }

        function getExpenseTypeId(type) {
            return window._EventExpenseType.filter(x => x["ExpensesType"].toLowerCase() == type)[0]["ExpensesTypeid"]
        }

        function getTrasportData(data) {
            var arr = [];
            var ids = window._EventExpenseType.filter(x => x["ExpensesType"].toLowerCase() == "transport");
            for (let i = 0; i < ids.length; i++) {
                if (data.filter(x => x["ExpensesTypeid"] == ids[i]["ExpensesTypeid"]).length > 0) {
                    arr.push({
                        ExpensesTypeid: ids[i]["ExpensesTypeid"],
                        slab: ids[i]["ExpenseTypeCode"],
                        amount: (data.filter(x => x["ExpensesTypeid"] == ids[i]["ExpensesTypeid"]))[0]["ExpenseAmount"]
                    })
                }
                else {
                    arr.push({
                        ExpensesTypeid: ids[i]["ExpensesTypeid"],
                        slab: ids[i]["ExpenseTypeCode"],
                        amount: 0
                    })
                }
            }
            return arr;
            //data.filter(ids.indexOf(x["ExpensesTypeid"] != -1)).map(x => new { slab: x["ExpensesTypeCode"],amount:x[""] })
        }

        function getGuideData(data) {
            var obj =  {
                expenseTypeId: getExpenseTypeId("guide"),
                guide: "",
                amount: 0,
                paymentMode:"online"
            }

            var result = getDataByCategory(data, "guide");
            if (result != null && result.length > 0) {
                obj.name = result[0]["ExpenseTypeSource"];
                obj.amount = result[0]["ExpenseAmount"];
                obj.paymentMode = result[0]["ExpenseModeOfPayment"];
            }
            return obj;
        }

    })
</script>